import {expect, test, vitest} from 'vitest'
import {EncryptionManager} from "./encryptionManager.ts";

// set timeout to 60 seconds
vitest.setConfig({
  testTimeout: 60000
});


test('encrypt and decrypt', async () => {
  const encryptionManager = new EncryptionManager();
  const data = 'hello world';
  const {publicKeyBase64, privateKeyBase64} = await encryptionManager.generateKeys();
  const {encryptedAesKeyAndIvBase64, encryptedDataBase64} = await encryptionManager.encrypt(publicKeyBase64, data);
  const decryptedData = await encryptionManager.decrypt(privateKeyBase64, encryptedAesKeyAndIvBase64, encryptedDataBase64);
  expect(decryptedData).toBe(data);
})

//#region test data
const testData: ITestData = JSON.parse("{\"aesKeyAndIv\":\"Y3m9C355kFeBmHt6mP3s8XRIAscDiVnmcMD4\u002BWNPyrJH8DbiygxEwI8ctB0fJB6ZNC9Udmy4oLvunFx16hM4j1G5bcvscWx28P0YnBATFXyJD27xynuwBjYNBVHJTiXHpKtx3hpqsuvMaPFug3uLuQN2n4UgXK43W\u002BUF7Hx7TSNE3lJ1huM5IMOXNaK0dGupT5L/OJzIYP1ztj0984ZQOrjyBB5b9fkEkedinYOxCoMtSefjia\u002BRyTjUUymmJ\u002BHgpayeQ4T1s3v8i0mrOAJ8e1g/TTfMjDh6exwTT4EKiFJZP0ihS\u002B4tWg2xiCt6c9qqqR99q8motR3Ewv2N2kv3OVUJLkBThZcRZEqyPMWSNZXKbqJoFp8mCysLFENqBcv4t9dqrvPiq3FruonlaJtxDpF2AlOOC\u002BLbom2s4sph6FrVmarRnVo/VZumR8PRGHXDYSF8DTb/nVGtlTUhRpoL27sNoaWhttYmonavpjWJPXfb47HAzAH2tx9EMbqR5Xz2uAYXVmrmmdRofo8ZdNNc5FQ15TABcJ3rUV4NRwwKA6B3R9KrZ3NwPVNuvzCphSeCTGvNyE2Zt1I9DOlaSa0s\u002BK2Bm0Kc3pygxYrYrUxsw6YWROr25pdLgc4ZgCO252dTncmDx\u002BiehaxaqMQRF0R7I2tijuOhZL5n53z2sqThpJU=:QMyY3Pzb\u002BRSTzGgsJLmg9l5vqsy2XyOrj5v/dTe6xA74Agtpc4x/2VS9uu6EyR9FCCwVHuXTrvniTTaiwm7lnF2OEVrYwo8ISLIN7Rxq9pKlnzERZcQYujKowlUrgYis12aUE4w6fXKo4cNh08BsLqfhWKr2E9INKlhPzVpNzvxvxUhUiLSpsqyRiZzqkB/sVJjIdF/n1LlTpt89wZlkLXDzGhNwUdShkAt3YlvTx7HQrx3ir5lnrtaxIsvRVXTk9oPPIlXnwqGq4R6lFdXznC8Q0ahY78f6mO96RTe1Oox\u002Bq\u002BBKfVQyIWvF15dTcexHyKCOOPFKP/xoZVKhGn9p5zV/Ui9NR1FsgtvPMD\u002BmTQmJkdYmedOluek05RJBoBtjKI2/aVmk47L1q6CHmSZfS16tgMsEl5Dp8YZ9svOSAsOrSioLLAHT6hfvh3EtJqJ1HqzpckFYvsqJ7tSj3O0cbLmCdjd6M05U88x0oQ8AjwFlOmExnphguwuJ9bVXp\u002B0BqtQ06VjrG/svpbn5OIL3ooa60WVmZwbp3RJ87sJlPH0ppXZHvSf7Gf8W4hfNyhqh6f94fZoVALsIWMkeF1LOXm9WmNKNOailXcjhLwRsFXEivXqrjSVJb0JkQGqB9x4siCuStQeaGAcTvOaQhJ7CRUY5pG66fD1SWqV70rQf2TY=\",\"encryptedData\":\"8Pf9q4tAMByf7cJ0Y2gVuwPJ6YJfG9c2NeMgVV9Di8Sj9LEaCra9BkP9Dol0EmhoE2DIVYE5TwBo\u002Bdz4\u002B3cMMvWIGG7M0A1S05zlNATi2LI=\",\"data\":\"outer champion enrich bread reduce prepare jar word entry funk quality what\"}\n");
const testPrivateKeyBase64 = "MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQDNz4TuXldWtqVTxTZ93NBWpjed7WiZBAC442qRwldczOfinvkjm98opuCbzWNwEVWhF+tDk1FEGjV2202DbmZnvWKJjoQAMdygMa+YiIiyH21UCSKE5JgA9MTNyfw9EGvU/zYTcIaUyLC6dTe1XNY4vj6+dKvEDNZUKpvI7S0QEUbMzWeEuYpmRe4kQpsoOLz4EGGPsR1lU6ntuksWv3VqazCiuy4qXUtq4UUO9IyhzjZWAfhsxgPKHqsMXxkG7wEGqGHGPNtk7LxiUJB7orGD8jP3WI9n4R4yFWBuy5ikFDEgdCLwkCjbW3h05XGGRQ8/AfDulT6FLrrG+T61kEIYXQE34lrvJ2fw/iRiBf1zKqNQW3WAUOHgawYvcqqL6mdqjrNpsJcIBSzsvb633Xzm2HzruhvCnz1P1kCRhTrEYysnEqJHJ0RB4Lvb0/657/OUW1Jl1G8oD8g0mgkqyKX2GzFMOeNjbnX7gczKrme5/7LVxTr3VM5GubxUW59AT6dJ3KVvIhedNV7Aw89SHPuHauHCFQxaPc1tTmFcCis6B8YEmxIXcrirtvHSnn7YhFhNzXkzon0eld3WxZGd9JI2nsufgeEqni0SncU1t3aKlCTxPDcAjxwJgj3/A+H/JR7wFBPpGAiz1gi/k9dern+Tb0PqfFE6Z/ErNK7OjP1LDwIDAQABAoICAEEi0+HzFrY5cQKdsFzONVuvGHwRhqCi7S2WwAQomyiiKyOEh7oW215MzlpQ+w8dVVn6LXnCFp60osYeqx4VIzDi9dwuMCW1oitK/lWKpKSnIJ1PlM61YEwxK1Yr/no/B7muGem2G8nb6F7iuUJbgusLfuUdHL2cCHszzwEc2z2yEhPAUGpnpF8w86kjMWLd7iSeXpoxBmoqu+Wip6An8RvAl/BwyDAdPcCyUf5lNFsDXhwDXKHkW4+s/BqawFt66fq28NbiLNd4uzhsYgXXHFJzpbG7JAvO6hUUwePe6MzJHTE1wFcdcOjXvrxUX4UMt0IMNbn0nwhcnT1a5ddltBzbIVan9V8INYorlFNbxmxtsZdeF5mzolRKCxLThHJjNwrhEpUndy40wJ34BpzCkXyUTQWXHIpS/3SOFZujsIUvi6lS24FaG0EWVLves2ma8OFEsv6auoqdhm2fUbZOoAEfm3yNI6Bmm7Bd+oj7/0+6eSCI/Aeb/oS4OBXxZq+YAhlsi7eNljG1MmCNastK7ei44ghZv+JnhSzvT6cODzkY4Q2oINCZHbJao7TQ2Jmd26P+T1WhRUxnT8eQeALbFVHGksQzkcw03/My9+JJfe/ccpSfwF0xjPGniSQfdkMrNGLZJUfhh+rpmWwG+bb+GxwkP9S3lXarphgt5mNahI6JAoIBAQD3jcMIQsnW00ci7T//lFIxMhKPxkNV7Fqs+pFu5LYHzI6iQexKOSKm/EnhoXhvUD3LTxyd45H+hfA3C1GYGW9I9bfb37UsCoSzrRZMORr/qxrYvsGPx/oFF3TrKM32n+zTqKd1uYLAEwD8PCfC7qMUgZbco6El0PXaqJPKqt3aTfVqXSptxcmubyUS+qs5RSQoA1ppdw/TV0V+66KVd+jG0ph37D0LL1nRZH14U0Kuwr1kUwov7tVlj9Rl8lCuFdhkp+VRzUlAEwSl5yBr4eMn7pGcZBpU/OTmfFVnVtfZmyZC9kJbBi9cGGNKG4Xnrx+30KmjlJAqzfXJEI6RGFUXAoIBAQDU1SfIQ+/No6YPPqzFXNoNsJgddzf0PP34p60dUwo6MZPDJvtr4TRnQfZRQUi40w8QZ71Majunv36CHwGE+H4yExyf3SjMSTuDBlbZw+bHhcIelNwdY9qcyXTZGhFkTUrEUGpz+Qg3misAKc5dW+DhUfpKIeQuwODw/Qcgv4v8+i1LZVPNMuk9HXBI+KIz6sXw+UipoucHoooTGfEZVqrNgq+6bdf2JKGFAlCB+V7kglrgTHFPUbHjURPwm4oiczMMbDq3q9x/EpSQK/kTa4MsqxHxezg00zdWmS1wgEjOFZz7kOEzUHRNKBKTA4m88fu4JEflK3KBW15lsWb39uTJAoIBAQCEZgpYYbgnsEoMkQ04eTBYZWpuAODElKuOdljQEXyVwT7L4ywoKlSxMJ+nEEAkcKsMEJzCiRLtKN9n4SLbkUbmo5yY+RWhn2KH4lvZmnUpJm8uWx+U8aRzkq8SknlNnQ0ByuL9YKFgbwmI3fd6Fz2bWw+/o7gtTIwhTSX2L9qFxkoqf/eQTEdohsMyWmS3NZZ33As/+tC4/KULk6UaAc66f6nSAcRINiP4jKFaeFViuH6oqIz7Q+ZX8kvr1mR2JvLcKrvIO14g6csDnBDIAkEGe17fYN6Ac91MtFTM9zJsjMEy8RheLHmp7NU1rnC4j/4LxorkFTHh4tPAnJ1TVsszAoIBAFUCovZB9Ind4Nlb/mSCtvIa5Fd4pBfhOMxWJTZ+Uap23P9pFam8dVL9LOa9vc9dNjomRZ09HYDeYyiUO+Yh3z4fFiLgkoguhB/Mq2ol7ospaSUP7m+qz8oqSYrh96ppmQCa4jpacSbMZHqXOD9gEI3PUbrEmMD396EqX+t7tu2f+/GOko9202S+2ne7IAa+sruSxqxDTiZljOMeTIgDbwvRNGGxuD4v2XgoOYIA2h9J1gSbY/L7vaL/YoiLh/xEqVI/9KAifFshT8faWI2iNu3jkrIytnubFhJ38odqJipyxZZSAzGc5CdhZzHjiuO2gAXIMBNgbEcw+J6D4o4OxskCggEADzJctR2t2dqSDzjo5WlND58Ypbhya/DJC9hePgqLT4DWet8chveJa6TW8ehJ+awe+zbCLGg6yb1I701+sp/YnQev9MMPAB7qC60wgMb8Ecf7E5+MJgwrG5/fD7+aN5LySs/kuiyKg87oTLoIy5Wld8bIS3KgKsg7iAaAg2R/EnmQ0zFgzrOc/GB2mF+ZU1R4mPCXTrayrLDmi4O7afTyBXV27w2sl+xpftbHeMXs8zjZWq4L/YG26xcL+BU/XgWUYka6DPIEmeOTPdaIqaN+ZiSTzUXU+ptHAIQ6scVjBieXb5Nu2FSHEYCuJSbRq8AJLWzijSB0STcbbX3ctkRieA==";
const testPublicKeyBase64 = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzc+E7l5XVralU8U2fdzQVqY3ne1omQQAuONqkcJXXMzn4p75I5vfKKbgm81jcBFVoRfrQ5NRRBo1dttNg25mZ71iiY6EADHcoDGvmIiIsh9tVAkihOSYAPTEzcn8PRBr1P82E3CGlMiwunU3tVzWOL4+vnSrxAzWVCqbyO0tEBFGzM1nhLmKZkXuJEKbKDi8+BBhj7EdZVOp7bpLFr91amsworsuKl1LauFFDvSMoc42VgH4bMYDyh6rDF8ZBu8BBqhhxjzbZOy8YlCQe6Kxg/Iz91iPZ+EeMhVgbsuYpBQxIHQi8JAo21t4dOVxhkUPPwHw7pU+hS66xvk+tZBCGF0BN+Ja7ydn8P4kYgX9cyqjUFt1gFDh4GsGL3Kqi+pnao6zabCXCAUs7L2+t9185th867obwp89T9ZAkYU6xGMrJxKiRydEQeC729P+ue/zlFtSZdRvKA/INJoJKsil9hsxTDnjY251+4HMyq5nuf+y1cU691TORrm8VFufQE+nSdylbyIXnTVewMPPUhz7h2rhwhUMWj3NbU5hXAorOgfGBJsSF3K4q7bx0p5+2IRYTc15M6J9HpXd1sWRnfSSNp7Ln4HhKp4tEp3FNbd2ipQk8Tw3AI8cCYI9/wPh/yUe8BQT6RgIs9YIv5PXXq5/k29D6nxROmfxKzSuzoz9Sw8CAwEAAQ==";
//#endregion

test('decrypt from test data', async () => {
  const encryptionManager = new EncryptionManager();
  const decryptedData = await encryptionManager.decrypt(testPrivateKeyBase64, testData.aesKeyAndIv, testData.encryptedData);
  expect(decryptedData).toBe(testData.data);
});

test('encrypt data', async () => {
  const encryptionManager = new EncryptionManager();
  const result = await encryptionManager.encrypt(testPublicKeyBase64, testData.data);
  const decryptedData = await encryptionManager.decrypt(testPrivateKeyBase64, result.encryptedAesKeyAndIvBase64, result.encryptedDataBase64);
  expect(decryptedData).toBe(testData.data);
});


interface ITestData {
  aesKeyAndIv: string,
  encryptedData: string,
  data: string
}